<?php
/**
 * This is the template for generating the migration class of a specified table.
 * DO NOT EDIT THIS FILE! It may be regenerated with Gii.
 */

use yii\helpers\Inflector;
use yii\helpers\StringHelper;

/**
 * @var yii\web\View $this
 * @var \year\gii\models\generators\gomodel\Generator $generator
 * @var string $tableName full table name
 */

//   $generator->tableName
$goColumnsMeta = columnsMetaData($giiConsolePath) ;
?>

package models

import (
    "github.com/go-ozzo/ozzo-validation"
)

type <?=  $className ?> struct {
//   Id          int    `json:"id"` // int32

<?php foreach ($properties as $property => $data): ?>
    <?php
    if(isset($goColumnsMeta[$property])){
       $goColType =  ($goColumnsMeta[$property]['GoType']) ;
    }else{
        $goColType = $data['type'] ; // FIXME 用php先替代
    }

    $prop = Inflector::id2camel($property, '_');
    // 描述形式： " `name` VARCHAR(64) NOT NULL "  需要做一下处理
    // $xormFieldDescription = trim($data['description']) ;
   // $xormFieldDescription = substr($xormFieldDescription,strpos($xormFieldDescription,' '))
    ?>
    <?= "\t {$prop}  $goColType  " . (" `json:\"{$property}\"  `  ") . "   //  " . ($data['comment'] ? ' ' . strtr($data['comment'], ["\n" => ' ']) : '') . "\n" ?>
<?php endforeach; ?>

// 依赖 Repo  可以用来做一些唯一性检测的验证约束
// repo <?= $className ?>Repo `json:"-" form:",omitempty"` //
}

<?php if($generator->genTableName):  ?>
// TableName sets the insert table name for this struct type
func (model *<?= $className ?>) TableName() string {
    return "<?= $tableName ?>"
}
<?php endif; ?>

<?php
// system($giiConsolePath, $info);
// echo $info;
//echo $giiConsolePath ;
//exec($giiConsolePath, $output, $return_val);
//print_r($output);
//print_r($return_val) ;
//
//$out = system($giiConsolePath,$return_status) ;
//if($return_status == 0){
//  // $jsonData =  \yii\helpers\Json::decode( $out ) ;
//  // print_r($jsonData) ;
//    echo 'jjjj' ;
//
//    echo  gettype(json_decode($out)) ;
//}else{
//    echo 'failed' ;
//}

/**
 * @param string $giiConsolePath
 * @return array|mixed
 */
function columnsMetaData($giiConsolePath = '')
{
    ob_start();
    passthru($giiConsolePath, $exitCode);
    $cmdOut = ob_get_contents();
    ob_end_clean(); //Use this instead of ob_flush()
    if ($exitCode == 0) {
        // echo  gettype($cmdOut) ;
        $j = json_decode($cmdOut, true);
        return ($j);
    } else {
        return [];
    }
}


?>